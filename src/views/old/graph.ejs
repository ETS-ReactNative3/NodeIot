<!doctype html>
<head>
	<link type="text/css" rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css">
	<link type="text/css" rel="stylesheet" href="/src/css/graph.css">
	<link type="text/css" rel="stylesheet" href="/src/css/detail.css">
	<link type="text/css" rel="stylesheet" href="/src/css/legend.css">
	<link type="text/css" rel="stylesheet" href="/css/extensions.css?v=2">

	<script src="../vendor/d3.v3.js"></script>

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
	<script>
		jQuery.noConflict();
	</script>

	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.min.js"></script>

	<script src="/src/js/Rickshaw.js"></script>
	<script src="/src/js/Rickshaw.Class.js"></script>
	<script src="/src/js/Rickshaw.Compat.ClassList.js"></script>
	<script src="/src/js/Rickshaw.Graph.js"></script>
	<script src="/src/js/Rickshaw.Graph.Renderer.js"></script>
	<script src="/src/js/Rickshaw.Graph.Renderer.Area.js"></script>
	<script src="/src/js/Rickshaw.Graph.Renderer.Line.js"></script>
	<script src="/src/js/Rickshaw.Graph.Renderer.Bar.js"></script>
	<script src="/src/js/Rickshaw.Graph.Renderer.ScatterPlot.js"></script>
	<script src="/src/js/Rickshaw.Graph.Renderer.Stack.js"></script>
	<script src="/src/js/Rickshaw.Graph.RangeSlider.js"></script>
	<script src="/src/js/Rickshaw.Graph.RangeSlider.Preview.js"></script>
	<script src="/src/js/Rickshaw.Graph.HoverDetail.js"></script>
	<script src="/src/js/Rickshaw.Graph.Annotate.js"></script>
	<script src="/src/js/Rickshaw.Graph.Legend.js"></script>
	<script src="/src/js/Rickshaw.Graph.Axis.Time.js"></script>
	<script src="/src/js/Rickshaw.Graph.Behavior.Series.Toggle.js"></script>
	<script src="/src/js/Rickshaw.Graph.Behavior.Series.Order.js"></script>
	<script src="/src/js/Rickshaw.Graph.Behavior.Series.Highlight.js"></script>
	<script src="/src/js/Rickshaw.Graph.Smoother.js"></script>
	<script src="/src/js/Rickshaw.Fixtures.Time.js"></script>
	<script src="/src/js/Rickshaw.Fixtures.Time.Local.js"></script>
	<script src="/src/js/Rickshaw.Fixtures.Number.js"></script>
	<script src="/src/js/Rickshaw.Fixtures.RandomData.js"></script>
	<script src="/src/js/Rickshaw.Fixtures.Color.js"></script>
	<script src="/src/js/Rickshaw.Color.Palette.js"></script>
	<script src="/src/js/Rickshaw.Graph.Axis.Y.js"></script>

	<script src="/js/extensions.js"></script>
	
	
	
	<!-- SOCKET IO -->
	<script src="<%= baseUrl%>:<%=socketIOPort %>/socket.io/socket.io.js"></script>     
	
	
	
</head>
<body>

<div id="content">

	<form id="side_panel">
		<h1>Beeyond</h1>
		<h1><%= captationName %></h1>
		<p>Export stream to file</p>
		<section><div id="legend"></div></section>
		<section>
			<div id="renderer_form" class="toggler">
				<input type="radio" name="renderer" id="area" value="area" checked>
				<label for="area">area</label>
				<input type="radio" name="renderer" id="bar" value="bar">
				<label for="bar">bar</label>
				<input type="radio" name="renderer" id="line" value="line">
				<label for="line">line</label>
				<input type="radio" name="renderer" id="scatter" value="scatterplot">
				<label for="scatter">scatter</label>
			</div>
		</section>
		<section>
			<div id="offset_form">
				<label for="stack">
					<input type="radio" name="offset" id="stack" value="zero" checked>
					<span>stack</span>
				</label>
				<label for="stream">
					<input type="radio" name="offset" id="stream" value="wiggle">
					<span>stream</span>
				</label>
				<label for="pct">
					<input type="radio" name="offset" id="pct" value="expand">
					<span>pct</span>
				</label>
				<label for="value">
					<input type="radio" name="offset" id="value" value="value">
					<span>value</span>
				</label>
			</div>
			<div id="interpolation_form">
				<label for="cardinal">
					<input type="radio" name="interpolation" id="cardinal" value="cardinal" checked>
					<span>cardinal</span>
				</label>
				<label for="linear">
					<input type="radio" name="interpolation" id="linear" value="linear">
					<span>linear</span>
				</label>
				<label for="step">
					<input type="radio" name="interpolation" id="step" value="step-after">
					<span>step</span>
				</label>
			</div>
		</section>
		<section>
			<h6>Smoothing</h6>
			<div id="smoother"></div>
		</section>
		<section></section>
	</form>

	<div id="chart_container">
		<div id="chart"></div>
		<div id="timeline"></div>
		<div id="preview"></div>
	</div>

</div>

<script>

// set up our data series with 150 random data points
var start = false;

var seriesData = [ [], [], [], [], [], [], [], [], [] ]; // LIMITED TO 9 VALUES



//https://github.com/shutterstock/rickshaw#rickshawcolorpalette
var palette = new Rickshaw.Color.Palette( { scheme: 'spectrum14' } );


// FOREACH VALUE , WE GET A SERIES DATA
var graph = new Rickshaw.Graph( {
	element: document.getElementById("chart"),
	width: 900,
	height: 500,
	renderer: 'area',
	stroke: true,
	preserve: true,
	

	series: [
	

        <% values.forEach(function(value, index) { %>
			{
		   	color: palette.color(),
			data: seriesData[<%= index %>],
			name: "<%= value %>"
			},
	
		   
        <% }); %>
	
		
	
	
	
	]
	
	
	} );


	
	var valuesLength = 0;
	
	 <% values.forEach(function(value, index) { %>
		valuesLength++;	
	 <% }); %>	 


	var valuesInStream = 100;
	
	var up = 0;
	
	function updateGraph(values){
		
		
		if(values.length != valuesLength){
		
			console.error("values and valuesLength are not the same length");
			return;
		}
		
		
		var valueMax = 65533;
		var errorValue = false;
		for(var i =0;i<values.length;i++){
		
			if(values[i] >= valueMax){
				console.error("Out of range data");
				errorValue = true;
			}
		
		
		}
		
		if(errorValue)return;
		
		<% values.forEach(function(value, index) { %>
		
		if(seriesData[<%= index %>].length > valuesInStream){
	
			var arr = seriesData[<%= index %>]
			seriesData[<%= index %>].shift();
			up++;
	
		}
	
		seriesData[<%= index %>].push({x:seriesData[<%= index %>].length + up,y:values[<%= index %>]});
		
		 <% }); %>
		
		graph.update();
	
		graph.render();
		
		
		if(!start){
	
			buildGraphComponents();
			start = true;
	
		}
	
	
	}
	
	
	
	
	
	/////////////////////////////
	// SOCKET IO
	/////////////////////////////
	
	
	var socket = io.connect('<%= baseUrl%>:<%=socketIOPort %>');

	var socketCommunicationInterval = 3000; // CLIENTS ARE ACTIVE 
	
	setInterval( function() {
	
		socket.emit('startCaptation', "apiKey");
		
		
		
	},socketCommunicationInterval );
	
		
	socket.on('receiveCaptation', function(captationValue) {
	
		
		
		console.log('Receive Captation Data : ' + captationValue);
		console.log("captation Value lg " + captationValue.length);
		
		updateGraph(captationValue);
		
	})

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


// LETS BUILD THE GRAPH COMPONENTS
function buildGraphComponents(){


	var preview = new Rickshaw.Graph.RangeSlider( {
		graph: graph,
		element: document.getElementById('preview'),
	} );

	var hoverDetail = new Rickshaw.Graph.HoverDetail( {
		graph: graph,
		xFormatter: function(x) {
			return new Date(x * 1000).toString();
		}
	} );

	var annotator = new Rickshaw.Graph.Annotate( {
		graph: graph,
		element: document.getElementById('timeline')
	} );

	var legend = new Rickshaw.Graph.Legend( {
		graph: graph,
		element: document.getElementById('legend')
	} );

	var shelving = new Rickshaw.Graph.Behavior.Series.Toggle( {
		graph: graph,
		legend: legend
	} );

	var order = new Rickshaw.Graph.Behavior.Series.Order( {
		graph: graph,
		legend: legend
	} );

	var highlighter = new Rickshaw.Graph.Behavior.Series.Highlight( {
		graph: graph,
		legend: legend
	} );

	var smoother = new Rickshaw.Graph.Smoother( {
		graph: graph,
		element: document.querySelector('#smoother')
	} );

	var ticksTreatment = 'glow';

	var xAxis = new Rickshaw.Graph.Axis.Time( {
		graph: graph,
		ticksTreatment: ticksTreatment,
		timeFixture: new Rickshaw.Fixtures.Time.Local()
	} );

	var yAxis = new Rickshaw.Graph.Axis.Y( {
		graph: graph,
		tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
		ticksTreatment: ticksTreatment
	} );


	var controls = new RenderControls( {
		element: document.querySelector('form'),
		graph: graph
	} );



}
	

</script>

</body>
